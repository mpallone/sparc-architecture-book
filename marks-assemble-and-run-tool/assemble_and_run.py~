#!/usr/bin/env python
#
# This program is a copy/paste of sample_python.py from
# the unicorn-engine repository, but modified to use
# sparc-elf-gcc to assemble a .s file and then parse
# out the sparc_code.
#
# Old file header:
#   Sample code for SPARC of Unicorn. Nguyen Anh Quynh <aquynh@gmail.com>
#   Python sample ported by Loi Anh Tuan <loianhtuan@gmail.com>

from __future__ import print_function
from unicorn import *
from unicorn.sparc_const import *

import argparse
import subprocess


# code to be emulated
#SPARC_CODE = b"\x86\x00\x40\x02" # add %g1, %g2, %g3;
SPARC_CODE = None
# memory address where emulation starts
ADDRESS    = 0x10000


# callback for tracing basic blocks
def hook_block(uc, address, size, user_data):
    print(">>> Tracing basic block at 0x%x, block size = 0x%x" %(address, size))


# callback for tracing instructions
def hook_code(uc, address, size, user_data):
    print(">>> Tracing instruction at 0x%x, instruction size = 0x%x" %(address, size))

def num_2_twos_complement_str(num):
    if not (num & 0x80000000):
        return str(num)
    num = ((~num) & 0xFFFFFFFF)
    num += 1
    return "-" + str(num)

# Test SPARC
def test_sparc():
    print("Emulate SPARC code")
    try:
        # Initialize emulator in SPARC EB mode
        mu = Uc(UC_ARCH_SPARC, UC_MODE_SPARC32|UC_MODE_BIG_ENDIAN)

        # map 2MB memory for this emulation
        mu.mem_map(ADDRESS, 2 * 1024 * 1024)

        # write machine code to be emulated to memory
        mu.mem_write(ADDRESS, SPARC_CODE)

        # initialize machine registers
        mu.reg_write(UC_SPARC_REG_G1, 0x1230)
        mu.reg_write(UC_SPARC_REG_G2, 0x6789)
        mu.reg_write(UC_SPARC_REG_G3, 0x5555)

        # tracing all basic blocks with customized callback
        mu.hook_add(UC_HOOK_BLOCK, hook_block)

        # tracing all instructions with customized callback
        mu.hook_add(UC_HOOK_CODE, hook_code)

        # emulate machine code in infinite time
        mu.emu_start(ADDRESS, ADDRESS + len(SPARC_CODE))

        # now print out some registers
        print(">>> Emulation done. Below is the CPU context")

        g1 = mu.reg_read(UC_SPARC_REG_G1)
        g2 = mu.reg_read(UC_SPARC_REG_G2)
        g3 = mu.reg_read(UC_SPARC_REG_G3)
        g4 = mu.reg_read(UC_SPARC_REG_G4)
        g5 = mu.reg_read(UC_SPARC_REG_G5)
        g6 = mu.reg_read(UC_SPARC_REG_G6)
        g7 = mu.reg_read(UC_SPARC_REG_G7)
        print(">>> G1 = 0x%x" %g1, num_2_twos_complement_str(g1))
        print(">>> G2 = 0x%x" %g2, num_2_twos_complement_str(g2))
        print(">>> G3 = 0x%x" %g3, num_2_twos_complement_str(g3))
        print(">>> G4 = 0x%x" %g4, num_2_twos_complement_str(g4))
        print(">>> G5 = 0x%x" %g5, num_2_twos_complement_str(g5))
        print(">>> G6 = 0x%x" %g6, num_2_twos_complement_str(g6))
        print(">>> G7 = 0x%x" %g7, num_2_twos_complement_str(g7))

        o0 = mu.reg_read(UC_SPARC_REG_O0)
        o1 = mu.reg_read(UC_SPARC_REG_O1)
        o2 = mu.reg_read(UC_SPARC_REG_O2)
        o3 = mu.reg_read(UC_SPARC_REG_O3)
        o4 = mu.reg_read(UC_SPARC_REG_O4)
        o5 = mu.reg_read(UC_SPARC_REG_O5)
        o6 = mu.reg_read(UC_SPARC_REG_O6)
        o7 = mu.reg_read(UC_SPARC_REG_O7)
        print(">>> O0 = 0x%x" %o0)
        print(">>> O1 = 0x%x" %o1)
        print(">>> O2 = 0x%x" %o2)
        print(">>> O3 = 0x%x" %o3)
        print(">>> O4 = 0x%x" %o4)
        print(">>> O5 = 0x%x" %o5)
        print(">>> O6 = 0x%x" %o6)
        print(">>> O7 = 0x%x" %o7)

        l1 = mu.reg_read(UC_SPARC_REG_L1)
        l2 = mu.reg_read(UC_SPARC_REG_L2)
        l3 = mu.reg_read(UC_SPARC_REG_L3)
        print(">>> L1 = 0x%x" %l1, num_2_twos_complement_str(l1))
        print(">>> L2 = 0x%x" %l2, num_2_twos_complement_str(l2))
        print(">>> L3 = 0x%x" %l3)

    except UcError as e:
        print("ERROR: %s" % e)

def main():
    parser = argparse.ArgumentParser(description="Assemble and run a SPARC .s file.")
    parser.add_argument("assembly_file", help=".s file to assemble and run")
    args = parser.parse_args()
    print("args.assembly_file:", args.assembly_file)

    cmd = "python3 ridiculous_assembler.py %s" % args.assembly_file
    print("Executing:\n    ", cmd)
    subprocess.check_call(cmd.split())

    # ridiculous_assembler.py should have written its output to tempUnicornFile
    infile = open("tempUnicornFile", "rb")
    global SPARC_CODE
    SPARC_CODE = infile.read()
    
    # Now that the binary data is loaded into SPARC_CODE, run the simulator.
    test_sparc()
    

if __name__ == '__main__':
    #test_sparc()
    main()
